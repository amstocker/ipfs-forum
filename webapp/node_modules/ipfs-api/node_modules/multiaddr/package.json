{
  "name": "multiaddr",
  "version": "1.0.0",
  "description": "multiaddr implementation (binary + string representation of network addresses)",
  "main": "index.js",
  "scripts": {
    "test": "tape test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jbenet/node-multiaddr.git"
  },
  "keywords": [
    "multiaddr",
    "binary",
    "string"
  ],
  "author": {
    "name": "Juan Benet",
    "email": "juan@benet.ai",
    "url": "http://juan.benet.ai/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jbenet/node-multiaddr/issues"
  },
  "homepage": "https://github.com/jbenet/node-multiaddr",
  "dependencies": {
    "buffer-equal": "0.0.1",
    "ip": "^0.3.0",
    "lodash.filter": "^2.4.1",
    "lodash.map": "^2.4.1",
    "xtend": "^3.0.0"
  },
  "devDependencies": {
    "tape": "^2.13.2"
  },
  "readme": "# node-multiaddr\n\n[multiaddr](https://github.com/jbenet/multiaddr) implementation in node.\n\n## Example\n\n### Simple\n\n```js\nvar multiaddr = require('multiaddr')\nvar addr = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n// <Multiaddr /ip4/127.0.0.1/udp/1234>\naddr.buffer\n// <Buffer >\naddr.toString()\n// /ip4/127.0.0.1/udp/1234\n\n// construct with Buffer\naddr = multiaddr(addr.buffer)\n// <Multiaddr /ip4/127.0.0.1/udp/1234>\n```\n\n### Protocols\n\n```js\n// get the multiaddr protocol codes\naddr.protoCodes()\n// [4, 6]\n\n// get the multiaddr protocol string codes\naddr.protoNames()\n// ['ip4', 'tcp']\n\n// get the multiaddr protocol description objects\naddr.protos()\n// [{code: 4, name: 'ip4', size: 32},\n//  {code: 17, name: 'udp', size: 16}]\n```\n\n### Other formats\n\n```js\n// get a node friendly address object\naddr.nodeAddress()\n// {family: \"IPv4\", port:1234, address: \"127.0.0.1\"} - note no UDP :(\naddr.fromNodeAddress({family: \"IPv4\", port:1234, address: \"127.0.0.1\"}, 'udp')\n// /ip4/127.0.0.1/udp/1234\n\n// handles the stupid string version too\naddr = multiaddr.fromStupidString(\"udp4://127.0.0.1:1234\")\n// <Multiaddr /ip4/127.0.0.1/udp/1234>\naddr.toStupidString(buf)\n// udp4://127.0.0.1:1234\n```\n\n### En/decapsulate\n\n```js\naddr.encapsulate('/sctp/5678')\n// <Multiaddr /ip4/127.0.0.1/udp/1234/sctp/5678>\naddr.decapsulate('/udp') // up to + inc last occurrence of this subaddr\n// <Multiaddr /ip4/127.0.0.1>\n```\n\n### Tunneling\n\nMultiaddr allows expressing tunnels very nicely.\n\n```js\nvar printer = multiaddr('/ip4/192.168.0.13/tcp/80')\nvar proxy = multiaddr('/ip4/10.20.30.40/tcp/443')\nvar printerOverProxy = proxy.encapsulate(printer)\n// <Multiaddr /ip4/10.20.30.40/tcp/443/ip4/192.168.0.13/tcp/80>\n\nvar proxyAgain = printerOverProxy.decapsulate('/ip4')\n// <Multiaddr /ip4/10.20.30.40/tcp/443>\n```\n",
  "readmeFilename": "README.md",
  "_id": "multiaddr@1.0.0",
  "_from": "multiaddr@^1.0.0"
}
